rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - If the authenticated user's ID matches the userId in the path.
     * @allow (get, update, delete) - If the authenticated user's ID matches the userId in the path.
     * @deny (create) - If the authenticated user's ID does not match the userId in the path.
     * @deny (get, update, delete) - If the authenticated user's ID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read inventory items.  Writes are disallowed.
     * @path /inventory
     * @allow (get, list) - Any authenticated user can read inventory items.
     * @deny (create, update, delete) - No one can write to the inventory collection.
     * @principle Public read, owner-only write (not applicable here as writes are denied).
     */
    match /inventory/{inventoryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to read orders. Writes are disallowed.
     * @path /orders
     * @allow (get, list) - Any authenticated user can read orders.
     * @deny (create, update, delete) - No one can write to the orders collection.
     * @principle Public read, owner-only write (not applicable here as writes are denied).
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to read car wash sales transactions.  Writes are disallowed.
     * @path /sales
     * @allow (get, list) - Any authenticated user can read sales transactions.
     * @deny (create, update, delete) - No one can write to the sales collection.
     * @principle Public read, owner-only write (not applicable here as writes are denied).
     */
    match /sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-level access control for service pricing data.
     * @path /users/{userId}/services/{serviceId}
     * @allow (create, get, update, delete, list) - If the authenticated user's ID matches the userId in the path.
     * @deny (create, get, update, delete, list) - If the authenticated user's ID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/services/{serviceId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read staff member data.  Writes are disallowed.
     * @path /staff
     * @allow (get, list) - Any authenticated user can read staff member data.
     * @deny (create, update, delete) - No one can write to the staff collection.
     * @principle Public read, owner-only write (not applicable here as writes are denied).
     */
    match /staff/{staffId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}