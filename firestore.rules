/**
 * @fileoverview Firestore Security Rules for CleanSweep Inventory.
 *
 * Core Philosophy:
 * This ruleset enforces a simple authentication model where any authenticated user can read data, but only authenticated users can modify data. No role-based access control is implemented.
 *
 * Data Structure:
 * The Firestore database consists of the following top-level collections:
 * - /inventory: Stores inventory items.
 * - /orders: Stores orders for new supplies.
 * - /sales: Stores car wash sale transactions.
 * - /services: Stores pricing information for car wash services.
 * - /staff: Stores staff members.
 *
 * Key Security Decisions:
 * - Public reads for all collections.
 * - Authenticated user required for write operations on all collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to the 'inventory' collection for all users, but requires authentication for create, update, and delete operations.
     * @path /databases/{database}/documents/inventory
     * @allow (get, list): Any user can read inventory items.
     * @allow (create, update, delete): Only authenticated users can modify inventory items.
     * @deny (create, update, delete): Unauthenticated users cannot modify inventory items.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /inventory/{inventoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants read access to the 'orders' collection for all users, but requires authentication for create, update, and delete operations.
     * @path /databases/{database}/documents/orders
     * @allow (get, list): Any user can read orders.
     * @allow (create, update, delete): Only authenticated users can modify orders.
     * @deny (create, update, delete): Unauthenticated users cannot modify orders.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants read access to the 'sales' collection for all users, but requires authentication for create, update, and delete operations.
     * @path /databases/{database}/documents/sales
     * @allow (get, list): Any user can read sales transactions.
     * @allow (create, update, delete): Only authenticated users can modify sales transactions.
     * @deny (create, update, delete): Unauthenticated users cannot modify sales transactions.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /sales/{saleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants read access to the 'services' collection for all users, but requires authentication for create, update, and delete operations.
     * @path /databases/{database}/documents/services
     * @allow (get, list): Any user can read pricing information.
     * @allow (create, update, delete): Only authenticated users can modify pricing information.
     * @deny (create, update, delete): Unauthenticated users cannot modify pricing information.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants read access to the 'staff' collection for all users, but requires authentication for create, update, and delete operations.
     * @path /databases/{database}/documents/staff
     * @allow (get, list): Any user can read staff members.
     * @allow (create, update, delete): Only authenticated users can modify staff members.
     * @deny (create, update, delete): Unauthenticated users cannot modify staff members.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /staff/{staffId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}