/**
 * @fileoverview Firestore Security Rules for CleanSweep Inventory.
 *
 * Core Philosophy:
 * This ruleset enforces a separation of concerns between user-specific data and global data.
 * User profiles are secured under the `/users/{userId}` path, ensuring only authenticated users can manage their own profiles.
 * Inventory, orders, sales, and staff data are treated as global, managed by the application owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the authenticated user with a matching UID.
 * - /inventory: Stores global inventory items, accessible to all authenticated users.
 * - /orders: Stores global orders, accessible to all authenticated users.
 * - /sales: Stores global sales transactions, accessible to all authenticated users.
 * - /users/{userId}/services: Stores pricing information specific to a user, only the owner can access this data.
 * - /staff: Stores global staff member information, accessible to all authenticated users.
 *
 * Key Security Decisions:
 * - No user listing is allowed to prevent information leakage.
 * - Global collections (inventory, orders, sales, staff) are readable by all authenticated users, but write access is restricted to ensure data integrity.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' creates their profile: request.auth.uid == 'user_abc'
     * @allow (get, update, delete) - User with UID 'user_abc' reads/updates/deletes their profile: request.auth.uid == 'user_abc'
     * @deny (create) - User with UID 'user_xyz' tries to create a profile for user 'user_abc': request.auth.uid != 'user_abc'
     * @deny (get, update, delete) - User with UID 'user_xyz' tries to read/update/delete the profile of user 'user_abc': request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for all operations.  Also enforces that the userId in the path matches the id in the document.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages the inventory collection, accessible to authenticated users.
     * @path /inventory
     * @allow (get, list) - Any authenticated user can read the inventory.
     * @deny (create, update, delete) - Only the application can modify inventory data.
     * @principle Allows public read access but restricts write access.
     */
    match /inventory/{document} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages the orders collection, accessible to authenticated users.
     * @path /orders
     * @allow (get, list) - Any authenticated user can read the orders.
     * @deny (create, update, delete) - Only the application can modify order data.
     * @principle Allows public read access but restricts write access.
     */
    match /orders/{document} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages the sales collection, accessible to authenticated users.
     * @path /sales
     * @allow (get, list) - Any authenticated user can read the sales data.
     * @deny (create, update, delete) - Only the application can modify sales data.
     * @principle Allows public read access but restricts write access.
     */
    match /sales/{document} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects user-specific service pricing information.
     * @path /users/{userId}/services/{serviceId}
     * @allow (create) - User with UID 'user_abc' creates a service entry: request.auth.uid == 'user_abc'
     * @allow (get, update, delete) - User with UID 'user_abc' reads/updates/deletes their service entry: request.auth.uid == 'user_abc'
     * @deny (create) - User with UID 'user_xyz' tries to create a service entry for user 'user_abc': request.auth.uid != 'user_abc'
     * @deny (get, update, delete) - User with UID 'user_xyz' tries to read/update/delete the service entry of user 'user_abc': request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for all operations. Also enforces that the userId in the path matches the id in the document.
     */
    match /users/{userId}/services/{serviceId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages the staff collection, accessible to authenticated users.
     * @path /staff
     * @allow (get, list) - Any authenticated user can read the staff data.
     * @deny (create, update, delete) - Only the application can modify staff data.
     * @principle Allows public read access but restricts write access.
     */
    match /staff/{document} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}