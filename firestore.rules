/**
 * @fileoverview Firestore Security Rules for CleanSweep Inventory application.
 *
 * Core Philosophy:
 * This ruleset prioritizes simplicity and assumes all data is private to the application's management team.
 * It enforces authentication for all write operations and currently allows public read access to `sales` data.
 * Other collections are read restricted to authenticated users, though this might need further refinement based on usage.
 *
 * Data Structure:
 * - /inventory: Stores inventory items.
 * - /orders: Stores orders for new supplies.
 * - /sales: Stores car wash sale transactions.
 * - /services: Stores pricing information for car wash services.
 *
 * Key Security Decisions:
 * - Public read access is granted to the `sales` collection to allow for unauthenticated reporting (subject to review).
 * - All write operations require authentication.
 * - Data shape validation is relaxed in this prototyping phase to enable rapid iteration.
 *
 * Denormalization for Authorization:
 * N/A - The current data model does not require denormalization. All authorization decisions are based on authentication.
 *
 * Structural Segregation:
 * N/A - There is no segregation of public and private data. All data is considered private except for sales.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the 'inventory' collection, requiring authentication for all write operations and allowing authenticated users to read.
     * @path /databases/{database}/documents/inventory
     * @allow (create) - Authenticated user can create an inventory item.
     * @deny (create) - Unauthenticated user attempts to create an inventory item.
     * @allow (get, list) - Authenticated user can read inventory.
     * @deny (get, list) - Unauthenticated user cannot read inventory.
     * @principle Requires authentication for all write operations; authenticated read access.
     */
    match /inventory/{inventoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures the 'orders' collection, requiring authentication for all write operations and allowing authenticated users to read.
     * @path /databases/{database}/documents/orders
     * @allow (create) - Authenticated user can create an order.
     * @deny (create) - Unauthenticated user attempts to create an order.
     * @allow (get, list) - Authenticated user can read orders.
     * @deny (get, list) - Unauthenticated user cannot read orders.
     * @principle Requires authentication for all write operations; authenticated read access.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures the 'sales' collection, allowing public read access but requiring authentication for write operations.
     * @path /databases/{database}/documents/sales
     * @allow (get, list) - Any user (authenticated or unauthenticated) can read sales data.
     * @deny (create) - Unauthenticated user attempts to create a sale.
     * @allow (create) - Authenticated user can create a sale.
     * @principle Allows public read access with authentication required for writes.
     */
    match /sales/{saleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures the 'services' collection, requiring authentication for all write operations and allowing authenticated users to read.
     * @path /databases/{database}/documents/services
     * @allow (create) - Authenticated user can create a service.
     * @deny (create) - Unauthenticated user attempts to create a service.
     * @allow (get, list) - Authenticated user can read services.
     * @deny (get, list) - Unauthenticated user cannot read services.
     * @principle Requires authentication for all write operations; authenticated read access.
     */
    match /services/{serviceId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}