
{
  "entities": {
    "InventoryItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InventoryItem",
      "type": "object",
      "description": "Represents an item in the carwash inventory.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the inventory item."
        },
        "category": {
          "type": "string",
          "description": "Category of the item (e.g., Soaps, Chemicals, Tools)."
        },
        "quantity": {
          "type": "number",
          "description": "Current quantity of the item in stock."
        },
        "location": {
          "type": "string",
          "description": "The location where the item is stored."
        }
      },
      "required": [
        "name",
        "quantity"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order for new supplies.",
      "properties": {
        "supplier": {
          "type": "string",
          "description": "Name of the supplier."
        },
        "date": {
          "type": "string",
          "description": "Date the order was placed.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the order (e.g., pending, processing, shipped, delivered)."
        },
        "total": {
          "type": "number",
          "description": "Total amount of the order."
        }
      },
      "required": [
        "supplier",
        "date",
        "status",
        "total"
      ]
    },
    "CarWashSale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CarWashSale",
      "type": "object",
      "description": "Represents a car wash sale transaction.",
      "properties": {
        "service": {
          "type": "string",
          "description": "Name of the car wash service provided."
        },
        "staffName": {
            "type": "string",
            "description": "Name of the staff member who performed the service."
        },
        "carSize": {
            "type": "string",
            "description": "Size of the car (e.g., small, medium, large)."
        },
        "date": {
          "type": "string",
          "description": "Date and time of the sale transaction.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "Price of the car wash service."
        },
        "commission": {
            "type": "number",
            "description": "Commission earned by the staff member for the service."
        },
        "hasCoupon": {
            "type": "boolean",
            "description": "Whether a coupon was used for the sale."
        },
        "paymentMethod": {
            "type": "string",
            "description": "Method of payment (e.g., coupon, cash, machine, not-paid)."
        },
        "waxAddOn": {
            "type": "boolean",
            "description": "Whether the wax add-on was included."
        },
        "isPaid": {
            "type": "boolean",
            "description": "Whether the service has been paid for."
        }
      },
      "required": [
        "service",
        "staffName",
        "date",
        "amount",
        "commission",
        "hasCoupon",
        "waxAddOn",
        "isPaid"
      ]
    },
    "Price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Price",
      "type": "object",
      "description": "Represents the dynamic pricing for a car wash service.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the service (e.g., Full Wash)."
        },
        "needsSize": {
          "type": "boolean",
          "description": "Whether this service requires a car size to determine the price."
        },
        "hasCoupon": {
          "type": "boolean",
          "description": "Whether this service can be paid for with a coupon."
        },
        "order": {
          "type": "number",
          "description": "A number to sort the services for display."
        },
        "prices": {
          "type": "object",
          "description": "A map of prices for different car sizes or a default price.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "price": { "type": "number" },
              "commission": { "type": "number" },
              "couponCommission": { "type": "number" }
            },
            "required": ["price", "commission"]
          }
        }
      },
      "required": [
        "name",
        "needsSize",
        "hasCoupon",
        "prices",
        "order"
      ]
    },
    "Staff": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Staff",
      "type": "object",
      "description": "Represents a staff member.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the staff member."
        }
      },
      "required": [
        "name"
      ]
    },
    "User": {
        "title": "User",
        "type": "object",
        "description": "Represents a user's profile.",
        "properties": {
            "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address."
            }
        },
        "required": ["email"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "users/{userId}",
        "schema": {
          "$ref": "#/entities/User"
        },
        "description": "Stores user profile information.",
        "subcollections": [
          {
            "path": "inventory",
            "schema": {
              "$ref": "#/entities/InventoryItem"
            },
            "description": "Stores inventory items for a specific user."
          },
          {
            "path": "orders",
            "schema": {
              "$ref": "#/entities/Order"
            },
            "description": "Stores orders for a specific user."
          },
          {
            "path": "sales",
            "schema": {
              "$ref": "#/entities/CarWashSale"
            },
            "description": "Stores sales transactions for a specific user."
          },
          {
            "path": "services",
            "schema": {
              "$ref": "#/entities/Price"
            },
            "description": "Stores pricing information for a specific user's car wash services."
          },
          {
            "path": "staff",
            "schema": {
              "$ref": "#/entities/Staff"
            },
            "description": "Stores staff members for a specific user."
          }
        ]
      }
    ],
    "reasoning": "The Firestore structure is designed to be multi-tenant, with all primary data collections (inventory, orders, sales, pricing, staff) stored under a specific user's document. This ensures data isolation and security, as users can only access their own data. User authentication is handled via email/password. Pricing data is initialized with default values on user registration."
  }
}
